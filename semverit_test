#! /bin/sh
# file: semverit_test

testGetNextVersionReturnsEmpty(){
  # Setup
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project 
  generate_change "$DIR" "$EXPECTED_VERSION" 
  tag "$DIR" "0.1.0"

  assertEquals "0.1.0,none" "$(getNextVersion $DIR)"
}

testGetInitialVersionIfNoTagsExist(){
  EXPECTED_VERSION="0.1.0"

  cd $(mktemp -d)
  generate_base_project

  DIR=$(pwd)
  assertEquals "$EXPECTED_VERSION,minor" "$(getNextVersion $DIR)"
}

testIncrementMajorWithBreakingChange(){
  EXISTING_VERSIONS="0.1.0"
  EXPECTED_VERSION="1.0.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_breaking_change "$DIR"
  tag "$DIR" "0.1.0"
  generate_breaking_change "$DIR"
  
  assertEquals "$EXPECTED_VERSION,major" "$(getNextVersion $DIR)"
}

testIncrementingMinorWithFeature(){
  EXISTING_VERSIONS="0.1.0"
  EXPECTED_VERSION="0.2.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_feature_change "$DIR"
  
  assertEquals "$EXPECTED_VERSION,minor" "$(getNextVersion $DIR)"
}

testIncrementMinorWithFeatureMaintainsMajor(){
  EXISTING_VERSIONS="3.1.0"
  EXPECTED_VERSION="3.2.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_feature_change "$DIR"
  
  assertEquals "$EXPECTED_VERSION,minor" "$(getNextVersion $DIR)"
}

testIncrementPatchWithBugfix(){
  EXISTING_VERSIONS="0.1.0"
  EXPECTED_VERSION="0.1.1"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_patch_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_patch_change "$DIR"
  
  assertEquals "$EXPECTED_VERSION,patch" "$(getNextVersion $DIR)"
}

testFeatureWithPatchIncrementsMinorAndResetsPatch(){
  EXISTING_VERSIONS="3.1.1"
  EXPECTED_VERSION="3.2.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_feature_change "$DIR"
  generate_patch_change "$DIR"
  
  assertEquals "$EXPECTED_VERSION,minor" "$(getNextVersion $DIR)"
}

testMajorWithFeatureAndPatchIncrmentsMajorAndResetsMinorAndPatch(){
  EXISTING_VERSIONS="3.1.0"
  EXPECTED_VERSION="4.0.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_breaking_change "$DIR"
  generate_feature_change "$DIR"
  generate_patch_change "$DIR"
  
  assertEquals "$EXPECTED_VERSION,major" "$(getNextVersion $DIR)"
}

testMajorResetMeta(){
  EXISTING_VERSIONS="3.1.0-boom"
  EXPECTED_VERSION="4.0.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_breaking_change "$DIR"

  assertEquals "$EXPECTED_VERSION,major" "$(getNextVersion $DIR)"
}

testMinorResetMeta(){
  EXISTING_VERSIONS="3.1.0-boom"
  EXPECTED_VERSION="3.2.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_feature_change "$DIR"

  assertEquals "$EXPECTED_VERSION,minor" "$(getNextVersion $DIR)"
}

testPatchResetMeta(){
  EXISTING_VERSIONS="3.1.0-boom"
  EXPECTED_VERSION="3.1.1"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"
  generate_patch_change "$DIR"

  assertEquals "$EXPECTED_VERSION,patch" "$(getNextVersion $DIR)"
}

testRcVersionReturnsVersionWithoutRC(){
  EXISTING_VERSIONS="3.1.0-rc1"
  EXPECTED_VERSION="3.1.0"
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_feature_change "$DIR"
  tag "$DIR" "$EXISTING_VERSIONS"

  assertEquals "$EXPECTED_VERSION,release" "$(getNextVersion $DIR)"
}

testIncrementMajor(){
  EXISTING_VERSION="0.1.0"
  EXPECTED_VERSION="1.0.0"
  
  assertEquals "$EXPECTED_VERSION,major" $(incrementMajor $EXISTING_VERSION) 
}

testIncrementMajorWithPrefixV(){
  EXISTING_VERSION="v0.1.0"
  EXPECTED_VERSION="v1.0.0"
  
  assertEquals "$EXPECTED_VERSION,major" $(incrementMajor $EXISTING_VERSION) 
}


testIncrementMinor(){
  EXISTING_VERSION="0.1.0"
  EXPECTED_VERSION="0.2.0"
  
  assertEquals "$EXPECTED_VERSION,minor" $(incrementMinor $EXISTING_VERSION) 
}

testIncrementPatch(){
  EXISTING_VERSION="0.1.0"
  EXPECTED_VERSION="0.1.1"
  
  assertEquals "$EXPECTED_VERSION,patch" $(incrementPatch $EXISTING_VERSION) 
}

testHasBreakingChanges(){
  cd $(mktemp -d)
  DIR=$(pwd)
  generate_base_project

  generate_breaking_change "$DIR" 
  tag "$DIR" "0.1.0" 
  generate_breaking_change "$DIR" 
   
  DIR=$(pwd)

  if ! hasBreakingChanges "$DIR" "0.1.0"; then
    fail
  fi
}

testGetLastVersion(){
  cd $(mktemp -d)
  DIR=$(pwd)

  generate_base_project
  generate_change "$DIR"
  tag "$DIR" "0.1.0"
  generate_change "$DIR"
  tag "$DIR" "0.2.0"

  assertEquals "0.2.0" "$(getLastVersion "$DIR")"
}

oneTimeSetUp() {
  # Load include to test.
  . ./semverit_test_lib
  . ./semverit_lib
}

# Load and run shUnit2.
. ./shunit2-2.1.7/shunit2
